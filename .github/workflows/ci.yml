name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        python -m flake8 mmpp/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        python -m flake8 mmpp/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        python -m black --check mmpp/
    
    - name: Type check with mypy
      run: |
        python -m mypy mmpp/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        python -m pytest tests/ -v --cov=mmpp --cov-report=xml
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml

  build-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build --sdist --wheel
    
    - name: Check package
      run: python -m twine check dist/*
    
    - name: Test installation
      run: |
        pip install dist/*.whl
        python -c "import mmpp; print('Package import successful')"
